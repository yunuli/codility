/*

[编程题] 手串
时间限制：1秒

空间限制：65536K

作为一个手串艺人，有金主向你订购了一条包含n个杂色串珠的手串——每个串珠要么无色，要么涂了若干种颜色。为了使手串的色彩看起来不那么单调，金主要求，手串上的任意一种颜色（不包含无色），在任意连续的m个串珠里至多出现一次（注意这里手串是一个环形）。手串上的颜色一共有c种。现在按顺时针序告诉你n个串珠的手串上，每个串珠用所包含的颜色分别有哪些。请你判断该手串上有多少种颜色不符合要求。即询问有多少种颜色在任意连续m个串珠中出现了至少两次。


输入描述:
第一行输入n，m，c三个数，用空格隔开。(1 <= n <= 10000, 1 <= m <= 1000, 1 <= c <= 50) 接下来n行每行的第一个数num_i('0', <= num_i <= c)表示第i颗珠子有多少种颜色。接下来依次读入num_i个数字，每个数字x表示第i颗柱子上包含第x种颜色(1 <= x <= c)

输出描述:
一个非负整数，表示该手链上有多少种颜色不符需求。

输入例子1:
5 2 3
3 1 2 3
'0',
2 2 3
1 2
1 3

输出例子1:
2

例子说明1:
第一种颜色出现在第1颗串珠，与规则无冲突。
第二种颜色分别出现在第 1，3，4颗串珠，第3颗与第4颗串珠相邻，所以不合要求。
第三种颜色分别出现在第1，3，5颗串珠，第5颗串珠的下一个是第1颗，所以不合要求。
总计有2种颜色的分布是有问题的。
这里第2颗串珠是透明的。
* */

let tf = require("./testFrame");

function readline(A) {
    if(curLine < A.length){
        return A[curLine++];
    }
    return null;
}

let curLine = 0, violationSet = new Set(), currentSet = new Set();

function addColors(pearls, i){
    for(let color of pearls[i]){
        if(violationSet.has(color)) continue;

        if(!currentSet.has(color)){
            currentSet.add(color);
        }else{
            violationSet.add(color);
        }
    }
}

function moveForward(pearls, m){
    const len = pearls.length;
    for(let first = 0, last = m; first < len; first++, last++){

        if(first >=m ){
            for(let color of pearls[first]){
                currentSet.delete(color);
            }
        }

        addColors(pearls,last < len ? last : last % len);
    }
}
function solution(A) {
    const [pearlN, m, colorN] = readline(A).split(' ');
    let pearlLine, index = 0;
    let pearls = Array(pearlN);
    while(pearlLine = readline(A)){
        pearlLine = pearlLine.split(' ');
        pearls[index++] = pearlLine.slice(1);
    }

    // pearls = pearls.concat(pearls.slice('0',, m - 1));

    moveForward(pearls,m);
    curLine = 0;
    return currentSet.size;



}

let testcases = [
    [['5 2 3', '3 1 2 3', '0', '2 2 3', '1 2', '1 3', '1 50']],
    [['100 10 50', '50 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50', '1 49', '0', '0', '0', '0', '0', '0', '0', '0', '50 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50', '1 48', '0', '0', '0', '0', '1 42', '0', '0', '1 28', '50 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50', '0', '0', '0', '0', '0', '1 39', '0', '0', '1 47', '50 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50', '1 45', '0', '0', '1 34', '0', '0', '0', '0', '0', '50 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50', '0', '0', '0', '0', '0', '0', '0', '0', '1 26', '50 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50', '0', '0', '0', '0', '0', '0', '0', '0', '0', '50 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50', '0', '0', '0', '0', '1 25', '0', '0', '1 33', '1 1', '50 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50', '0', '0', '0', '0', '0', '0', '0', '0', '0', '50 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50', '1 27', '0', '1 41', '0', '1 13', '0', '1 29', '0', '0', '50 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50', '0', '0', '0', '0', '0', '2 5 11', '0', '1 50', '0']]
];
//answer
//2
//19

tf.run(solution, testcases);

//5 2 3
// 3 1 2 3
// '0',
// 2 2 3
// 1 2
// 1 3

while(line=readline()){
    var lines = line.split(' ');  //字符串转换为字符数组
    var a = parseInt(lines[0]);
    var b = parseInt(lines[1]);
    print(a+b);
}
